# `user nginx;`: This directive specifies the system user account that the Nginx
#   worker processes will run as. Running as an unprivileged user (`nginx`) instead of
#   `root` is a critical security practice (Principle of Least Privilege).
user nginx;

# `worker_processes auto;`: This controls how many worker processes Nginx will spawn
#   to handle incoming requests. Each worker can handle many connections.
#   Setting it to `auto` is a best practice that tells Nginx to automatically detect
#   the number of available CPU cores and create one worker for each core.
worker_processes auto;

# The `events` block contains directives related to network connection processing.
events {
    # `worker_connections 1024;`: Sets the maximum number of simultaneous connections
    #   that each worker process can handle.
    worker_connections 1024;
}

# The `http` block defines the configuration for handling HTTP and HTTPS traffic.
http {
    # `include /etc/nginx/mime.types;`: This includes a file that maps file extensions
    #   (like .css, .jpg, .js) to their corresponding MIME types. This tells the browser
    #   how to correctly interpret the files it receives.
    include /etc/nginx/mime.types;

    # `default_type ...;`: If Nginx encounters a file with an unknown extension,
    #   it will use this default MIME type.
    default_type application/octet-stream;

    # `sendfile on;`: A performance optimization. It allows Nginx to copy data
    #   directly from the file on disk to the network socket, which is much more
    #   efficient than reading it into the application's memory first.
    sendfile on;

    # `keepalive_timeout 65;`: A performance optimization. It tells Nginx to keep a
    #   connection to a browser open for 65 seconds after a request is finished.
    #   This allows the browser to make subsequent requests without the overhead
    #   of re-establishing the network connection.
    keepalive_timeout 65;

    # This is the main `server` block that handles all secure traffic for your website.
    server {
        # `listen 443 ssl;`: Listen on port 443 (the standard HTTPS port) and enable
        #   the SSL/TLS protocol for all connections on this port.
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name ${DOMAIN_NAME};

        # `root /var/www/html;`: The "document root". This is the directory on the
        #   filesystem where Nginx will look for the website's files.
        root /var/www/html;

        # `index ...;`: If a user requests a directory (e.g., yoursite.com/), Nginx will
        #   look for these files in this order inside that directory.
        index index.php index.html;

        # --- SSL/TLS Configuration ---

        # `ssl_certificate ...;`: Specifies the path to your public SSL certificate file.
        ssl_certificate /etc/nginx/ssl/public.crt;
        # `ssl_certificate_key ...;`: Specifies the path to your private key file.
        ssl_certificate_key /etc/nginx/ssl/private.key;

        # `ssl_protocols ...;`: This is a MANDATORY security requirement from the project
        #   subject. It restricts the server to using only modern, secure TLS protocols.
        ssl_protocols TLSv1.2 TLSv1.3;

        # --- Location Blocks ---
        # Nginx processes requests by matching them against `location` blocks.

        # `location /`: This is the default block that catches all requests.
        # `try_files ...`: This is the key to making WordPress's "pretty permalinks" work.
        #   1. It first tries to find a file at the exact requested path (`$uri`).
        #   2. If not found, it tries to see if the path is a directory (`$uri/`).
        #   3. If both fail, it passes the request internally to `/index.php` to let
        #      WordPress's router handle it.
        location / {
            try_files $uri $uri/ /index.php?$args;
        }

        # `location ~ \.php$`: This block handles all requests that end in `.php`.
        #   - `~`: Specifies a case-sensitive regular expression match.
        #   - `\.php$`: The regular expression for "ends with '.php'".
        location ~ \.php$ {
            # `include fastcgi_params;`: Includes a standard file containing common
            #   parameters required for the FastCGI protocol to work.
            include fastcgi_params;
            # `fastcgi_pass wordpress:9000;`: This is the most important line. It tells Nginx
            #   to pass the request to a FastCGI server (your PHP-FPM service) located at
            #   the hostname `wordpress` on port `9000`.
            fastcgi_pass wordpress:9000;
            fastcgi_index index.php;
            # `fastcgi_param SCRIPT_FILENAME ...`: This sets a parameter that tells
            #   PHP-FPM the absolute path on the filesystem to the PHP script that
            #   needs to be executed.
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }
    }
}