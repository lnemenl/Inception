# -----------------------------------------------------------------------------
# This file defines the multi-container Docker application. It orchestrates
# the Nginx, WordPress, and MariaDB services, along with their networking
# and persistent data storage.
# -----------------------------------------------------------------------------

# Defines all the application's services (containers).
services:
  # --- MariaDB Service ---
  # The database container for our WordPress installation.
  mariadb:
    # WHAT: Build a custom image from the specified Dockerfile.
    build:
      context: ./requirements/mariadb
    # A fixed, predictable name for the container for easier management.
    container_name: mariadb
    # Load non-sensitive configuration (like database name, user) from a .env file.
    env_file: .env
    # Defines environment variables that point to the location of secret files.
    # The MariaDB image uses these specific variables to read passwords securely.
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      WORDPRESS_DATABASE_PASSWORD_FILE: /run/secrets/db_password
    # WHAT: Securely mount password files into the container.
    # WHY:  This is the Docker-native way to handle sensitive data. The files
    #       appear at '/run/secrets/<secret_name>' and are stored in memory,
    #       which is more secure than using environment variables.
    secrets:
      - db_root_password
      - db_password
    # Connect this service to our custom network. This allows it to communicate
    # with other services using their names (e.g., 'wordpress') as hostnames.
    networks:
      - inception
    # WHAT: Mount a volume to persist database files.
    # WHY:  This ensures that all database data is stored on the host machine
    #       and survives container restarts, recreations, or updates. Without this,
    #       all WordPress data would be lost when the container is removed.
    volumes:
      - mariadb_data:/var/lib/mysql
    # Automatically restart the container if it crashes or stops unexpectedly.
    # This ensures high availability for the database.
    restart: on-failure

  # --- WordPress Service ---
  # The container running the WordPress application with PHP-FPM.
  wordpress:
    build:
      context: ./requirements/wordpress
    container_name: wordpress
    env_file: .env
    # Points the WordPress application to the files containing its passwords.
    environment:
      WORDPRESS_DATABASE_PASSWORD_FILE: /run/secrets/db_password
      WORDPRESS_ADMIN_PASSWORD_FILE: /run/secrets/wp_admin_password
      WORDPRESS_USER_PASSWORD_FILE: /run/secrets/wp_user_password
    secrets:
      - db_password
      - wp_admin_password
      - wp_user_password
    networks:
      - inception
    # Mount a volume to persist all WordPress files (uploads, themes, plugins).
    # This is the same volume Nginx will read from.
    volumes:
      - wordpress_data:/var/www/html
    # WHAT: Control the startup order of services.
    # WHY:  WordPress cannot function without a database. This directive ensures
    #       that the 'mariadb' service is started and healthy before this
    #       WordPress service is started, preventing connection errors on launch.
    depends_on:
      - mariadb
    restart: on-failure

  # --- Nginx Service ---
  # The web server acting as the public entry point to the application.
  nginx:
    build:
      context: ./requirements/nginx
    container_name: nginx
    env_file: .env
    # WHAT: Expose a port from the container to the host machine.
    # WHY:  This maps port 443 (standard for HTTPS) on the host to port 443 in
    #       the container, making the web server accessible from the outside world.
    ports:
      - "443:443"
    # WHAT: Mount the WordPress files volume in read-only mode.
    # WHY:  Nginx only needs to *read* the WordPress files to serve them. Mounting
    #       the volume as read-only (':ro') is a critical security best practice.
    #       It prevents a potential vulnerability in Nginx from being used to
    #       modify your website's code.
    volumes:
      - wordpress_data:/var/www/html:ro
    # Ensure WordPress is running before Nginx starts, so it has a valid
    # upstream service to proxy requests to.
    depends_on:
      - wordpress
    networks:
      - inception
    restart: on-failure

# Defines the custom networks for inter-service communication.
networks:
  inception:
    # WHAT: Use the standard 'bridge' driver.
    # WHY:  A custom bridge network provides a private, isolated network for
    #       the containers. It also enables Docker's built-in DNS service,
    #       allowing containers to resolve each other by their service names.
    driver: bridge
    # A fixed, predictable name for the network.
    name: inception_network

# Defines the volumes for persistent data storage.
volumes:
  mariadb_data:
    # WHAT: Use a 'local' driver with specific options to create a bind mount.
    # WHY:  Instead of letting Docker manage the volume's location, these
    #       options force the volume to be a direct link to a specific path
    #       on the host machine ('${DATA_PATH}/mariadb'). This fulfills the
    #       project requirement to have data stored in '/home/login/data'.
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/mariadb
  wordpress_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/wordpress

# Top-level key that defines the source files for the secrets.
# Services can then reference these secrets by their key (e.g., 'db_password').
secrets:
  db_root_password:
    file: ../secrets/db_root_password.txt
  db_password:
    file: ../secrets/db_password.txt
  wp_admin_password:
    file: ../secrets/wp_admin_password.txt
  wp_user_password:
    file: ../secrets/wp_user_password.txt