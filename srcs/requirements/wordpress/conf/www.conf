; This is the main configuration file for a PHP-FPM "worker pool".
; PHP-FPM (FastCGI Process Manager) is the service that runs your PHP code. It manages
; a "pool" of worker processes that are ready to handle incoming requests from the web server (Nginx).

; `[www]`: This is the name of the worker pool. `www` is the standard name for the default pool.
[www]

; `user = nobody` & `group = nobody`: These directives set the system user and group that the
;   PHP worker processes will run as.
; WHY: This is a crucial security practice (Principle of Least Privilege). The `nobody` user is a
;   standard, unprivileged account on Alpine Linux. By running PHP as `nobody`, you ensure that
;   if a hacker exploits a vulnerability in a WordPress plugin, they only gain the minimal
;   permissions of this user, not the all-powerful `root` user, which contains the damage.
user = nobody
group = nobody

; `listen = 9000`: This tells the worker pool where to listen for incoming FastCGI requests.
;   In this case, it's listening for TCP connections on port 9000. This port number must
;   perfectly match the `fastcgi_pass wordpress:9000;` directive in your Nginx configuration,
;   as this is the connection point between the two services.
listen = 9000

; `pm = dynamic`: This is the Process Manager setting. It controls how PHP-FPM creates
;   and destroys worker processes to handle traffic.
; YOUR CHOICE: `dynamic`
;   - In this mode, FPM keeps a variable number of idle processes ready, spawning more
;     as traffic increases and killing them off as it decreases. It's a balanced approach
;     that offers good performance while conserving memory during quiet periods.
; ALTERNATIVES:
;   - `static`: Keeps a fixed number of processes running at all times. Faster, but uses more memory.
;   - `ondemand`: Only creates processes when a request arrives. Best for memory, but can be slower
;     for the first visitor. `dynamic` is the best general-purpose choice here.
;
pm = dynamic

; These `pm.*` directives are for tuning the `dynamic` process manager. The numbers chosen here
; are reasonable starting points for a small website running on a system with limited resources.
; `pm.max_children = 5`: The absolute maximum number of worker processes that can be running
;   at the same time. This is the most important memory-limiting setting. Each PHP process
;   consumes RAM, so this cap prevents a traffic spike from using up all the memory on your
;   virtual machine and crashing the server. `5` is a safe, conservative value.
pm.max_children = 5

; `pm.start_servers = 2`: The number of worker processes to create when PHP-FPM first starts.
;   This ensures that from the moment the service is up, there are 2 processes immediately
;   available to handle requests, providing good initial responsiveness.
pm.start_servers = 2

; `pm.min_spare_servers = 1`: The minimum number of *idle* "spare" processes that FPM should
;   always keep ready and waiting for new requests. If traffic is very low, this ensures at
;   least one worker is always on standby, preventing a delay for the next visitor.
pm.min_spare_servers = 1

; `pm.max_spare_servers = 3`: The maximum number of *idle* "spare" processes. If a burst of
;   traffic ends, FPM will start killing off idle workers to save memory, but it will
;   keep up to 3 of them around for a while, just in case another burst arrives soon.
pm.max_spare_servers = 3

;
; `clear_env = no`: This directive controls whether the worker processes inherit the environment
;   variables from the main FPM process.
; WHY IT'S HERE: The default is `yes`, which is a security feature that prevents potentially
;   sensitive information from leaking into the PHP environment. However, in a Docker setup,
;   the standard way to pass configuration is through environment variables. If this was set
;   to `yes`, all the variables you defined in your `docker-compose.yml` would be erased, and
;   your scripts would fail. Setting it to `no` is **mandatory** for your Dockerized setup to work.
;
clear_env = no