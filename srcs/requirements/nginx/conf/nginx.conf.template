# -----------------------------------------------------------------------------
# This file is a template for the main Nginx configuration. The entrypoint
# script will use 'envsubst' to replace ${DOMAIN_NAME} with its actual value,
# generating the final 'nginx.conf' file used by the server.
# -----------------------------------------------------------------------------

# Run worker processes as the unprivileged 'nginx' user for security.
user nginx;
# Automatically set the number of worker processes to the number of CPU cores.
worker_processes auto;

# Configures network connection handling settings.
events {
    # Max simultaneous connections per worker process.
    worker_connections 1024;
}

# Defines the configuration for HTTP/HTTPS traffic.
http {
    # Include a map of file extensions to MIME types.
    include /etc/nginx/mime.types;
    # Default MIME type for files with unknown extensions.
    default_type application/octet-stream;

    # --- Performance Optimizations ---
    # Enables efficient file transfer directly from the kernel.
    sendfile on;
    # Allows a single connection to remain open for multiple requests.
    keepalive_timeout 65;

    # --- Virtual Server Definition ---
    # This block defines the configuration for our WordPress site.
    server {
        # Listen for incoming HTTPS traffic on port 443 for both IPv4 and IPv6.
        listen 443 ssl;
        listen [::]:443 ssl;

        # The domain name this server block will respond to.
        # This is a placeholder that will be replaced by the entrypoint script.
        server_name ${DOMAIN_NAME};

        # --- SSL/TLS Configuration ---
        # Defines the location of the SSL certificate and private key.
        ssl_certificate /etc/nginx/ssl/public.crt;
        ssl_certificate_key /etc/nginx/ssl/private.key;
        # Enforce strong, modern TLS protocols as required by the project.
        ssl_protocols TLSv1.2 TLSv1.3;

        # The root directory where website files are located. This path points
        # to the shared volume mounted from the WordPress container.
        root /var/www/html;
        # Defines the default files to serve if a directory is requested.
        index index.php index.html;

        # --- Request Routing ---

        # The default location block that handles all incoming requests.
        # WHAT: Tries to serve a static file or directory that matches the URL.
        # WHY:  This is the key to making WordPress's "pretty permalinks"
        #       (e.g., /my-blog-post/) work. If no matching file is found
        #       (like /my-blog-post.html), it passes the request to
        #       /index.php, allowing WordPress's router to handle it.
        location / {
            try_files $uri $uri/ /index.php?$args;
        }

        # This block handles all requests for files ending in .php.
        # WHAT: Passes the request to the WordPress container for processing.
        # WHY:  Nginx cannot execute PHP code itself. It acts as a proxy,
        #       forwarding the request to a service that can: PHP-FPM.
        location ~ \.php$ {
            include fastcgi_params;
            # This is the most critical line: it tells Nginx to pass the
            # request to the PHP-FPM service running in the 'wordpress'
            # container on its standard port, 9000.
            fastcgi_pass wordpress:9000;
            # Specifies the default file if the script name is empty.
            fastcgi_index index.php;
            # Sets a variable that tells PHP-FPM the exact path of the script to execute.
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }
    }
}